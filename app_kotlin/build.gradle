apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion COMPILE_SDK_VERSION
//    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "edu.ptu.java.app_kotlin"
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    //Data binding
    viewBinding.enabled = true
    dataBinding.enabled true

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    kotlinOptions {
        jvmTarget = "1.8"
        //“Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6
    }
    sourceSets{
        main.java.srcDirs += 'src/main/proto'
//        main.java.srcDirs += 'src/proto_gen/java'


    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.core:core-ktx:$androidXTestCoreVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayoutVersion"

    testImplementation "junit:junit:$junitVersion"
///==================================== AndroidX Test  [](https://developer.android.google.cn/training/testing/set-up-project?hl=zh-cn)
 // Core library
    androidTestImplementation "androidx.test:core:$androidXTestExtKotlinRunnerVersion"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:runner:$androidXTestExtKotlinRunnerVersion"
    androidTestImplementation "androidx.test:rules:$androidXTestExtKotlinRunnerVersion"

    // Assertions
    androidTestImplementation "androidx.test.ext:junit:$androidXTestExtKotlinRunnerVersion"
    androidTestImplementation "androidx.test.ext:truth:$androidXTestExtKotlinRunnerVersion"
    androidTestImplementation "com.google.truth:truth:$truthVersion"

    // Espresso dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$espressoVersion"

    // The following Espresso dependency can be either "implementation"
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK's compile classpath or the test APK
    // classpath.
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"
///==================================== AndroidX Test end


    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //viewmodel
    implementation "androidx.fragment:fragment-ktx:$fragmentKtxVersion"
//    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:$hilt_jetpack_version'
//    kapt 'androidx.hilt:hilt-compiler:$hilt_jetpack_version'
//    kaptAndroidTest 'androidx.hilt:hilt-compiler:$hilt_jetpack_version'

    //hilt
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hiltAndroidXVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltAndroidXVersion"
    //反射
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"



    def work_version = "2.3.4"
    // (Java only)
    implementation "androidx.work:work-runtime:$work_version"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"
    // optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:$work_version"
    // optional - GCMNetworkManager support
    implementation "androidx.work:work-gcm:$work_version"
    // optional - Test helpers
    androidTestImplementation "androidx.work:work-testing:$work_version"


    // Preferences DataStore
    implementation "androidx.datastore:datastore-preferences:1.0.0-alpha01"
    // Proto DataStore
    implementation "androidx.datastore:datastore-core:1.0.0-alpha01"

    //storage
    implementation 'com.google.protobuf:protobuf-javalite:3.8.0'

    //图片加载库
    implementation("io.coil-kt:coil:0.9.5")


}

apply plugin: 'com.google.protobuf'
//https://github.com/google/protobuf-gradle-plugin
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.8.0' // 也可以配置本地编译器路径
    }
    //3.8以前
//    plugins {
//        javalite {
//            artifact = 'com.google.protobuf:protoc-gen-javalite:3.8.0'
//        }
//
//    }
    //更改路径
    generatedFilesBaseDir = "$projectDir/src/proto_gen"
    generateProtoTasks {
        all().each { task ->
//            task.builtins {
//                remove java
//            }
            task.builtins {
                // 生产java源码，Java提供 nano,lite,java三种版本
                java {
                    option "lite"
                }
//                javalite { }//3.8以前
//                cpp { }// 生产cpp源码
//                grpc {}
            }
        }
    }
}

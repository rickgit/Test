apply plugin: 'com.android.application'
if (file('../file/repos').exists())
apply plugin: 'appt2-fix'

android {


    defaultConfig {
        applicationId "edu.ptu.test"
        versionCode Integer.parseInt(APP_VERSION_CODE)
        versionName APP_VERSION_NAME
//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
                arguments = [ moduleName : project.getName() ]
                arguments += ["room.schemaLocation":
                                              "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }

    //资源固化参数
    aaptOptions{
        additionalParameters "--package-id", "0x80"//模块ids分区

        File publicTxtFile = project.rootProject.file('public.txt')
        if (publicTxtFile.exists()) {
            additionalParameters "--stable-ids", "${project.rootProject.file('public.txt').absolutePath}"
        } else {
            additionalParameters "--emit-ids", "${project.rootProject.file('public.txt').absolutePath}"
        }
    }
//    android.applicationVariants.all {def variant ->
//        def processResourcesTask = project.tasks.getByName("process${variant.name.capitalize()}Resources")
//        if (processResourcesTask) {
//            def aaptOptions = processResourcesTask.aaptOptions
//            File publicTxtFile = project.rootProject.file('public.txt')
//            //public文件存在，则应用，不存在则生成
//            if (publicTxtFile.exists()) {
//                project.logger.error "${publicTxtFile} exists, apply it."
//                //aapt2添加--stable-ids参数应用
//                aaptOptions.additionalParameters("--stable-ids", "${publicTxtFile}")
//            } else {
//                project.logger.error "${publicTxtFile} not exists, generate it."
//                //aapt2添加--emit-ids参数生成
//                aaptOptions.additionalParameters("--emit-ids", "${publicTxtFile}")
//            }
//        }
//    }
//    applicationVariants.all { variant ->
//        if (variant.getBuildType().isMinifyEnabled()) {
//            variant.assemble.doLast {
//                println "路径 ${variant.mappingFile}"
//                copy {
//                    from variant.mappingFile
//                    into "${rootDir}/proguardTools"
//                    rename { String fileName ->
//                        "mapping-${variant.name}.txt"
//                    }
//                }
//            }
//        }
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation 'com.android.support:appcompat-v7:23.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'


    implementation 'com.tencent:mmkv:1.0.10'//跨进程

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation project(path: ':Utils')
    implementation project(path: ':Utils-Android')

    implementation 'com.twitter.serial:serial:0.1.6'
    //解耦 dagger2
    api 'com.google.dagger:dagger:2.28'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.28'
// dagger.android
    api 'com.google.dagger:dagger-android:2.28'
    api 'com.google.dagger:dagger-android-support:2.28' // if you use the support libraries
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.28'




    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'

    // 网络
     implementation 'com.android.volley:volley:1.1.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation("com.squareup.okhttp3:okhttp:4.1.0")
    implementation("com.google.code.gson:gson:2.7")


//    annotationProcessor( project(':process'))
    androidTestImplementation project(':JavaTest')

    //单元测试
    testImplementation 'junit:junit:4.13-beta-3'
    testImplementation 'org.mockito:mockito-core:1.10.19'

// https://developer.android.google.cn/training/testing/set-up-project?hl=zh-cn
    // Core library
    androidTestImplementation 'androidx.test:core:1.0.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.0.0'
    androidTestImplementation 'androidx.test.ext:truth:1.0.0'
    androidTestImplementation 'com.google.truth:truth:0.42'

    // Espresso dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.1.0'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.1.0'

    // The following Espresso dependency can be either "implementation"
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK's compile classpath or the test APK
    // classpath.
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.1.0'



    ///////////////  room
    def room_version = "2.2.5"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"

    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"
}

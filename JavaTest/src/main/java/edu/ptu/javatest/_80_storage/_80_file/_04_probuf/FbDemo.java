// automatically generated by the FlatBuffers compiler, do not modify

package edu.ptu.javatest._80_storage._80_file._04_probuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FbDemo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static FbDemo getRootAsFbDemo(ByteBuffer _bb) { return getRootAsFbDemo(_bb, new FbDemo()); }
  public static FbDemo getRootAsFbDemo(ByteBuffer _bb, FbDemo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FbDemo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int age() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public double money() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public String times(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int timesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public StringVector timesVector() { return timesVector(new StringVector()); }
  public StringVector timesVector(StringVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public byte test(int j) { int o = __offset(12); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int testLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector testVector() { return testVector(new ByteVector()); }
  public ByteVector testVector(ByteVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer testAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer testInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createFbDemo(FlatBufferBuilder builder,
      int nameOffset,
      int age,
      double money,
      int timesOffset,
      int testOffset) {
    builder.startTable(5);
    FbDemo.addMoney(builder, money);
    FbDemo.addTest(builder, testOffset);
    FbDemo.addTimes(builder, timesOffset);
    FbDemo.addAge(builder, age);
    FbDemo.addName(builder, nameOffset);
    return FbDemo.endFbDemo(builder);
  }

  public static void startFbDemo(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addAge(FlatBufferBuilder builder, int age) { builder.addInt(1, age, 0); }
  public static void addMoney(FlatBufferBuilder builder, double money) { builder.addDouble(2, money, 0.0); }
  public static void addTimes(FlatBufferBuilder builder, int timesOffset) { builder.addOffset(3, timesOffset, 0); }
  public static int createTimesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTimesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTest(FlatBufferBuilder builder, int testOffset) { builder.addOffset(4, testOffset, 0); }
  public static int createTestVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createTestVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startTestVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endFbDemo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishFbDemoBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedFbDemoBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FbDemo get(int j) { return get(new FbDemo(), j); }
    public FbDemo get(FbDemo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

